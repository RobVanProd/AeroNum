// Core traits for AeroNum library
// Defines the fundamental interfaces for numerical computing operations

// Core numeric trait that all array element types must implement
pub trait Numeric {
    // Basic arithmetic operations
    fn add(self, other: Self) -> Self;
    fn sub(self, other: Self) -> Self;
    fn mul(self, other: Self) -> Self;
    fn div(self, other: Self) -> Self;
    fn rem(self, other: Self) -> Self;
    
    // Comparison operations
    fn eq(self, other: Self) -> bool;
    fn ne(self, other: Self) -> bool;
    fn lt(self, other: Self) -> bool;
    fn le(self, other: Self) -> bool;
    fn gt(self, other: Self) -> bool;
    fn ge(self, other: Self) -> bool;
    
    // Constants and special values
    fn zero() -> Self;
    fn one() -> Self;
    fn min_value() -> Self;
    fn max_value() -> Self;
    
    // Type conversion and casting
    fn from_i32(value: i32) -> Self;
    fn from_f64(value: f64) -> Self;
    fn to_f64(self) -> f64;
    
    // Mathematical functions
    fn abs(self) -> Self;
    fn sqrt(self) -> Self;
    fn sin(self) -> Self;
    fn cos(self) -> Self;
    fn exp(self) -> Self;
    fn log(self) -> Self;
}

// Implement Numeric for built-in types
impl Numeric for i32 {
    fn add(self, other: Self) -> Self { self + other }
    fn sub(self, other: Self) -> Self { self - other }
    fn mul(self, other: Self) -> Self { self * other }
    fn div(self, other: Self) -> Self { self / other }
    fn rem(self, other: Self) -> Self { self % other }
    
    fn eq(self, other: Self) -> bool { self == other }
    fn ne(self, other: Self) -> bool { self != other }
    fn lt(self, other: Self) -> bool { self < other }
    fn le(self, other: Self) -> bool { self <= other }
    fn gt(self, other: Self) -> bool { self > other }
    fn ge(self, other: Self) -> bool { self >= other }
    
    fn zero() -> Self { 0 }
    fn one() -> Self { 1 }
    fn min_value() -> Self { -2147483648 }
    fn max_value() -> Self { 2147483647 }
    
    fn from_i32(value: i32) -> Self { value }
    fn from_f64(value: f64) -> Self { value as i32 }
    fn to_f64(self) -> f64 { self as f64 }
    
    fn abs(self) -> Self { if self < 0 { -self } else { self } }
    fn sqrt(self) -> Self { (self as f64).sqrt() as i32 }
    fn sin(self) -> Self { (self as f64).sin() as i32 }
    fn cos(self) -> Self { (self as f64).cos() as i32 }
    fn exp(self) -> Self { (self as f64).exp() as i32 }
    fn log(self) -> Self { (self as f64).log() as i32 }
}

impl Numeric for f64 {
    fn add(self, other: Self) -> Self { self + other }
    fn sub(self, other: Self) -> Self { self - other }
    fn mul(self, other: Self) -> Self { self * other }
    fn div(self, other: Self) -> Self { self / other }
    fn rem(self, other: Self) -> Self { self % other }
    
    fn eq(self, other: Self) -> bool { self == other }
    fn ne(self, other: Self) -> bool { self != other }
    fn lt(self, other: Self) -> bool { self < other }
    fn le(self, other: Self) -> bool { self <= other }
    fn gt(self, other: Self) -> bool { self > other }
    fn ge(self, other: Self) -> bool { self >= other }
    
    fn zero() -> Self { 0.0 }
    fn one() -> Self { 1.0 }
    fn min_value() -> Self { -1.7976931348623157e+308 }
    fn max_value() -> Self { 1.7976931348623157e+308 }
    
    fn from_i32(value: i32) -> Self { value as f64 }
    fn from_f64(value: f64) -> Self { value }
    fn to_f64(self) -> f64 { self }
    
    fn abs(self) -> Self { if self < 0.0 { -self } else { self } }
    fn sqrt(self) -> Self { self.sqrt() }
    fn sin(self) -> Self { self.sin() }
    fn cos(self) -> Self { self.cos() }
    fn exp(self) -> Self { self.exp() }
    fn log(self) -> Self { self.log() }
}

// Trait for BLAS backend implementations
pub trait BlasBackend {
    // Level 1 BLAS operations (vector-vector)
    fn dot<T: Numeric>(x: &[T], y: &[T]) -> T;
    fn axpy<T: Numeric>(alpha: T, x: &[T], y: &mut [T]);
    fn scal<T: Numeric>(alpha: T, x: &mut [T]);
    fn nrm2<T: Numeric>(x: &[T]) -> T;
    
    // Level 2 BLAS operations (matrix-vector)
    fn gemv<T: Numeric>(alpha: T, a: &[T], x: &[T], beta: T, y: &mut [T], 
                        m: i32, n: i32, lda: i32);
    
    // Level 3 BLAS operations (matrix-matrix)
    fn gemm<T: Numeric>(alpha: T, a: &[T], b: &[T], beta: T, c: &mut [T],
                        m: i32, n: i32, k: i32, lda: i32, ldb: i32, ldc: i32);
}

// Trait for array operations
pub trait ArrayOps<T: Numeric, const D: i32> {
    // Element access
    fn get(&self, indices: &[i32]) -> Option<&T>;
    fn get_mut(&mut self, indices: &[i32]) -> Option<&mut T>;
    fn set(&mut self, indices: &[i32], value: T) -> bool;
    
    // Shape and dimension information
    fn shape(&self) -> &[i32];
    fn ndim(&self) -> i32;
    fn size(&self) -> i32;
    fn len(&self) -> i32;
    fn is_empty(&self) -> bool;
    
    // Array creation and manipulation
    fn zeros(shape: &[i32]) -> Self;
    fn ones(shape: &[i32]) -> Self;
    fn fill(shape: &[i32], value: T) -> Self;
    fn reshape(&self, new_shape: &[i32]) -> Option<Self>;
    fn transpose(&self) -> Self;
    
    // Element-wise operations
    fn add_scalar(&self, scalar: T) -> Self;
    fn mul_scalar(&self, scalar: T) -> Self;
    fn add_array(&self, other: &Self) -> Option<Self>;
    fn mul_array(&self, other: &Self) -> Option<Self>;
    
    // Reduction operations
    fn sum(&self) -> T;
    fn mean(&self) -> T;
    fn min(&self) -> T;
    fn max(&self) -> T;
    fn argmin(&self) -> i32;
    fn argmax(&self) -> i32;
    
    // Iteration and mapping
    fn map<F>(&self, f: F) -> Self where F: Fn(T) -> T;
    fn fold<F, U>(&self, init: U, f: F) -> U where F: Fn(U, T) -> U;
}

// Trait for memory layout and data access patterns
pub trait MemoryLayout {
    fn is_contiguous(&self) -> bool;
    fn is_c_contiguous(&self) -> bool;
    fn is_fortran_contiguous(&self) -> bool;
    fn stride(&self) -> &[i32];
    fn offset(&self) -> i32;
    fn make_contiguous(&self) -> Self;
}

// Trait for slicing operations
pub trait Sliceable<T: Numeric> {
    type Output;
    
    fn slice(&self, ranges: &[Range]) -> Self::Output;
    fn slice_mut(&mut self, ranges: &[Range]) -> Self::Output;
}

// Range type for slicing
pub struct Range {
    pub start: i32,
    pub end: i32,
    pub step: i32,
}

impl Range {
    pub fn new(start: i32, end: i32) -> Range {
        Range { start, end, step: 1 }
    }
    
    pub fn with_step(start: i32, end: i32, step: i32) -> Range {
        Range { start, end, step }
    }
    
    pub fn all() -> Range {
        Range { start: 0, end: -1, step: 1 }
    }
}

// Trait for advanced indexing operations
pub trait AdvancedIndexing<T: Numeric> {
    type Output;
    
    fn select(&self, indices: &[i32]) -> Self::Output;
    fn take(&self, indices: &[i32], axis: i32) -> Self::Output;
    fn put(&mut self, indices: &[i32], values: &[T]);
}

// Trait for broadcasting operations
pub trait Broadcastable<T: Numeric> {
    fn broadcast_to(&self, shape: &[i32]) -> Option<Self>;
    fn broadcast_with<Other>(&self, other: &Other) -> Option<(Self, Other)>;
}

