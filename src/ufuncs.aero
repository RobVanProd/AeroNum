// Universal Functions (ufuncs) for AeroNum
// Provides efficient element-wise operations with broadcasting support

use crate::traits::Numeric;
use crate::array::Array;
use crate::memory::DataOwnership;

// Universal function trait for element-wise operations
pub trait UniversalFunction<T: Numeric> {
    fn apply(&self, input: T) -> T;
    fn apply_binary(&self, left: T, right: T) -> T;
}

// Macro for defining unary universal functions
// In a real implementation, this would be a proper macro
pub struct UnaryUFunc<T: Numeric, F> 
where F: Fn(T) -> T {
    func: F,
    _phantom: core::marker::PhantomData<T>,
}

impl<T: Numeric, F> UnaryUFunc<T, F> 
where F: Fn(T) -> T {
    pub fn new(func: F) -> UnaryUFunc<T, F> {
        UnaryUFunc {
            func,
            _phantom: core::marker::PhantomData,
        }
    }
    
    pub fn apply_to_array<const D: i32>(&self, array: &Array<T, D>) -> Array<T, D> 
    where T: Copy {
        let data_slice = array.as_slice();
        let new_data: Vec<T> = data_slice.iter().map(|&x| (self.func)(x)).collect();
        
        Array::new(new_data, array.shape()).unwrap()
    }
}

// Macro for defining binary universal functions
pub struct BinaryUFunc<T: Numeric, F> 
where F: Fn(T, T) -> T {
    func: F,
    _phantom: core::marker::PhantomData<T>,
}

impl<T: Numeric, F> BinaryUFunc<T, F> 
where F: Fn(T, T) -> T {
    pub fn new(func: F) -> BinaryUFunc<T, F> {
        BinaryUFunc {
            func,
            _phantom: core::marker::PhantomData,
        }
    }
    
    pub fn apply_to_arrays<const D: i32>(&self, left: &Array<T, D>, right: &Array<T, D>) -> Option<Array<T, D>>
    where T: Copy {
        if left.shape() != right.shape() {
            return None;
        }
        
        let left_data = left.as_slice();
        let right_data = right.as_slice();
        let new_data: Vec<T> = left_data.iter().zip(right_data.iter())
            .map(|(&a, &b)| (self.func)(a, b)).collect();
        
        Some(Array::new(new_data, left.shape()).unwrap())
    }
    
    pub fn apply_scalar_left<const D: i32>(&self, scalar: T, array: &Array<T, D>) -> Array<T, D>
    where T: Copy {
        let data_slice = array.as_slice();
        let new_data: Vec<T> = data_slice.iter().map(|&x| (self.func)(scalar, x)).collect();
        
        Array::new(new_data, array.shape()).unwrap()
    }
    
    pub fn apply_scalar_right<const D: i32>(&self, array: &Array<T, D>, scalar: T) -> Array<T, D>
    where T: Copy {
        let data_slice = array.as_slice();
        let new_data: Vec<T> = data_slice.iter().map(|&x| (self.func)(x, scalar)).collect();
        
        Array::new(new_data, array.shape()).unwrap()
    }
}

// Predefined mathematical universal functions

// Arithmetic operations
pub fn add<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> T> {
    BinaryUFunc::new(|a, b| a.add(b))
}

pub fn subtract<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> T> {
    BinaryUFunc::new(|a, b| a.sub(b))
}

pub fn multiply<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> T> {
    BinaryUFunc::new(|a, b| a.mul(b))
}

pub fn divide<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> T> {
    BinaryUFunc::new(|a, b| a.div(b))
}

pub fn remainder<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> T> {
    BinaryUFunc::new(|a, b| a.rem(b))
}

// Unary mathematical functions
pub fn abs<T: Numeric>() -> UnaryUFunc<T, impl Fn(T) -> T> {
    UnaryUFunc::new(|x| x.abs())
}

pub fn sqrt<T: Numeric>() -> UnaryUFunc<T, impl Fn(T) -> T> {
    UnaryUFunc::new(|x| x.sqrt())
}

pub fn sin<T: Numeric>() -> UnaryUFunc<T, impl Fn(T) -> T> {
    UnaryUFunc::new(|x| x.sin())
}

pub fn cos<T: Numeric>() -> UnaryUFunc<T, impl Fn(T) -> T> {
    UnaryUFunc::new(|x| x.cos())
}

pub fn exp<T: Numeric>() -> UnaryUFunc<T, impl Fn(T) -> T> {
    UnaryUFunc::new(|x| x.exp())
}

pub fn log<T: Numeric>() -> UnaryUFunc<T, impl Fn(T) -> T> {
    UnaryUFunc::new(|x| x.log())
}

// Comparison operations
pub fn equal<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> bool> {
    BinaryUFunc::new(|a, b| a.eq(b))
}

pub fn not_equal<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> bool> {
    BinaryUFunc::new(|a, b| a.ne(b))
}

pub fn less<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> bool> {
    BinaryUFunc::new(|a, b| a.lt(b))
}

pub fn less_equal<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> bool> {
    BinaryUFunc::new(|a, b| a.le(b))
}

pub fn greater<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> bool> {
    BinaryUFunc::new(|a, b| a.gt(b))
}

pub fn greater_equal<T: Numeric>() -> BinaryUFunc<T, impl Fn(T, T) -> bool> {
    BinaryUFunc::new(|a, b| a.ge(b))
}

// Convenience functions for direct array operations
impl<T: Numeric, const D: i32> Array<T, D> where T: Copy {
    // Arithmetic operations
    pub fn add(&self, other: &Array<T, D>) -> Option<Array<T, D>> {
        add().apply_to_arrays(self, other)
    }
    
    pub fn add_scalar(&self, scalar: T) -> Array<T, D> {
        add().apply_scalar_right(self, scalar)
    }
    
    pub fn sub(&self, other: &Array<T, D>) -> Option<Array<T, D>> {
        subtract().apply_to_arrays(self, other)
    }
    
    pub fn sub_scalar(&self, scalar: T) -> Array<T, D> {
        subtract().apply_scalar_right(self, scalar)
    }
    
    pub fn mul(&self, other: &Array<T, D>) -> Option<Array<T, D>> {
        multiply().apply_to_arrays(self, other)
    }
    
    pub fn mul_scalar(&self, scalar: T) -> Array<T, D> {
        multiply().apply_scalar_right(self, scalar)
    }
    
    pub fn div(&self, other: &Array<T, D>) -> Option<Array<T, D>> {
        divide().apply_to_arrays(self, other)
    }
    
    pub fn div_scalar(&self, scalar: T) -> Array<T, D> {
        divide().apply_scalar_right(self, scalar)
    }
    
    // Mathematical functions
    pub fn abs(&self) -> Array<T, D> {
        abs().apply_to_array(self)
    }
    
    pub fn sqrt(&self) -> Array<T, D> {
        sqrt().apply_to_array(self)
    }
    
    pub fn sin(&self) -> Array<T, D> {
        sin().apply_to_array(self)
    }
    
    pub fn cos(&self) -> Array<T, D> {
        cos().apply_to_array(self)
    }
    
    pub fn exp(&self) -> Array<T, D> {
        exp().apply_to_array(self)
    }
    
    pub fn log(&self) -> Array<T, D> {
        log().apply_to_array(self)
    }
    
    // In-place operations (for mutable arrays)
    pub fn add_assign(&mut self, other: &Array<T, D>) -> bool {
        if self.shape() != other.shape() {
            return false;
        }
        
        if let Some(self_data) = self.as_mut_slice() {
            let other_data = other.as_slice();
            for (dst, &src) in self_data.iter_mut().zip(other_data.iter()) {
                *dst = dst.add(src);
            }
            true
        } else {
            false
        }
    }
    
    pub fn add_assign_scalar(&mut self, scalar: T) -> bool {
        if let Some(self_data) = self.as_mut_slice() {
            for elem in self_data.iter_mut() {
                *elem = elem.add(scalar);
            }
            true
        } else {
            false
        }
    }
    
    pub fn mul_assign(&mut self, other: &Array<T, D>) -> bool {
        if self.shape() != other.shape() {
            return false;
        }
        
        if let Some(self_data) = self.as_mut_slice() {
            let other_data = other.as_slice();
            for (dst, &src) in self_data.iter_mut().zip(other_data.iter()) {
                *dst = dst.mul(src);
            }
            true
        } else {
            false
        }
    }
    
    pub fn mul_assign_scalar(&mut self, scalar: T) -> bool {
        if let Some(self_data) = self.as_mut_slice() {
            for elem in self_data.iter_mut() {
                *elem = elem.mul(scalar);
            }
            true
        } else {
            false
        }
    }
}

// Reduction operations
impl<T: Numeric, const D: i32> Array<T, D> where T: Copy {
    pub fn sum_axis(&self, axis: i32) -> Option<Array<T, D>> {
        if axis < 0 || axis >= self.ndim() {
            return None;
        }
        
        let shape = self.shape();
        let mut new_shape = shape.to_vec();
        new_shape.remove(axis as usize);
        
        if new_shape.is_empty() {
            // Scalar result
            let total = self.sum();
            return Some(Array::new(vec![total], &[1]).unwrap());
        }
        
        let axis_size = shape[axis as usize];
        let new_size = new_shape.iter().fold(1, |acc, &dim| acc * dim);
        let mut result_data = vec![T::zero(); new_size as usize];
        
        // This is a simplified implementation
        // A full implementation would handle arbitrary axis reduction efficiently
        let data_slice = self.as_slice();
        for (i, &value) in data_slice.iter().enumerate() {
            let result_idx = i % new_size as usize;
            result_data[result_idx] = result_data[result_idx].add(value);
        }
        
        Some(Array::new(result_data, &new_shape).unwrap())
    }
    
    pub fn mean_axis(&self, axis: i32) -> Option<Array<T, D>> {
        let sum_result = self.sum_axis(axis)?;
        let shape = self.shape();
        let axis_size = T::from_i32(shape[axis as usize]);
        
        Some(sum_result.div_scalar(axis_size))
    }
    
    pub fn min_axis(&self, axis: i32) -> Option<Array<T, D>> {
        if axis < 0 || axis >= self.ndim() {
            return None;
        }
        
        let shape = self.shape();
        let mut new_shape = shape.to_vec();
        new_shape.remove(axis as usize);
        
        if new_shape.is_empty() {
            let min_val = self.min();
            return Some(Array::new(vec![min_val], &[1]).unwrap());
        }
        
        // Simplified implementation
        let new_size = new_shape.iter().fold(1, |acc, &dim| acc * dim);
        let mut result_data = vec![T::max_value(); new_size as usize];
        
        let data_slice = self.as_slice();
        for (i, &value) in data_slice.iter().enumerate() {
            let result_idx = i % new_size as usize;
            if value.lt(result_data[result_idx]) {
                result_data[result_idx] = value;
            }
        }
        
        Some(Array::new(result_data, &new_shape).unwrap())
    }
    
    pub fn max_axis(&self, axis: i32) -> Option<Array<T, D>> {
        if axis < 0 || axis >= self.ndim() {
            return None;
        }
        
        let shape = self.shape();
        let mut new_shape = shape.to_vec();
        new_shape.remove(axis as usize);
        
        if new_shape.is_empty() {
            let max_val = self.max();
            return Some(Array::new(vec![max_val], &[1]).unwrap());
        }
        
        // Simplified implementation
        let new_size = new_shape.iter().fold(1, |acc, &dim| acc * dim);
        let mut result_data = vec![T::min_value(); new_size as usize];
        
        let data_slice = self.as_slice();
        for (i, &value) in data_slice.iter().enumerate() {
            let result_idx = i % new_size as usize;
            if value.gt(result_data[result_idx]) {
                result_data[result_idx] = value;
            }
        }
        
        Some(Array::new(result_data, &new_shape).unwrap())
    }
}

